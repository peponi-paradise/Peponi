namespace Peponi.SourceGenerators;

/// <summary>
/// Use this attribute for mapping gRPC services.<br/>
/// Static class `GrpcServerMapper` will be generated in namespace `Peponi.SourceGenerators.Grpc`.<br/>
/// User could use `GetStandaloneServices()` (<see cref="GrpcServerMode.Standalone"/>) or `MapClientFactoryServices(IEndpointRouteBuilder)` (<see cref="GrpcServerMode.ClientFactory"/>) in `GrpcServerMapper`<br/><br/>
/// <para>
/// - *.cs file that created by Protobuf compiler lookes like followings:
/// <code>
/// // Generated by Protobuf compiler
/// namespace ServerContext
/// {
///     public static partial class HelloWorld
///     {
///         public static ServerServiceDefinition BindService(HelloWorldBase base)
///         {
///         }
///
///         public abstract partial class HelloWorldBase
///         {
///         }
///     }
/// }
/// </code>
/// - Input and generated code looks like followings:
/// <code>
/// <see cref="GrpcServerMode.Standalone"/>
/// </code>
/// <code>
/// // Input
///
/// namespace GeneratorTest
/// {
///     [GrpcServer(GrpcServerMode.Standalone)]
///     public class CodeTest : HelloWorld.HelloWorldBase
///     {
///     }
/// }
/// </code>
/// <code>
/// // Generated
///
/// using Grpc.Core;
///
/// namespace Peponi.SourceGenerators.Grpc;
///
/// public static partial class GrpcServerMapper
/// {
///     public static List&lt;ServerServiceDefinition&gt; GetStandaloneServices()
///     {
///         List&lt;ServerServiceDefinition&gt; rtns = new();
///         rtns.Add(global::ServerContext.HelloWorld.BindService(new global::GeneratorTest.CodeTest()));
///         return rtns;
///     }
/// }
/// </code>
/// </para>
/// </summary>
/// <remarks>
/// <see href="https://github.com/peponi-paradise/Peponi/tree/Release/Peponi.SourceGenerators"/>
/// </remarks>
[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
public class GrpcServerAttribute : Attribute
{
    /// <summary>
    /// Sets the Server mode<br/>
    /// Supports<br/>
    /// 1. <see cref="GrpcServerMode.Standalone"/><br/>
    /// 2. <see cref="GrpcServerMode.ClientFactory"/>
    /// <para>
    /// Generated code looks like followings:
    /// <code>
    /// 1. <see cref="GrpcServerMode.Standalone"/><br/><br/>
    /// using Grpc.Core;
    ///
    /// namespace Peponi.SourceGenerators.Grpc;
    ///
    /// public static partial class GrpcServerMapper
    /// {
    ///     public static List&lt;ServerServiceDefinition&gt; GetStandaloneServices()
    ///     {
    ///         List&lt;ServerServiceDefinition&gt; rtns = new();
    ///         rtns.Add(global::ServerContext.HelloWorld.BindService(new global::GeneratorTest.CodeTest()));
    ///         return rtns;
    ///     }
    /// }
    /// </code>
    /// <code>
    /// 2. <see cref="GrpcServerMode.ClientFactory"/><br/><br/>
    /// using Microsoft.AspNetCore.Routing;
    ///
    /// namespace Peponi.SourceGenerators.Grpc;
    ///
    /// public static partial class GrpcServerMapper
    /// {
    ///     public static IEndpointRouteBuilder MapClientFactoryServices(IEndpointRouteBuilder builder)
    ///     {
    ///         builder.MapGrpcService&lt;global::GeneratorTest.CodeTest&gt;();
    ///         return builder;
    ///     }
    /// }
    /// </code>
    /// </para>
    /// </summary>
    public GrpcServerMode GrpcServerMode { get; set; }

    public GrpcServerAttribute(GrpcServerMode serverMode)
    {
        GrpcServerMode = serverMode;
    }
}